2002-02-03  Gwenole Beauchesne  <gbeauchesne@mandrakesoft.com>

	Various testcases from gcc-3.0-branch
	* gcc/testsuite/g++.old-deja/g++.other/unroll.C: New test.
	* gcc/testsuite/gcc.c-torture/compile/20011010-1.c: Likewise.
	* gcc/testsuite/gcc.c-torture/execute/20011008-3.c: Likewise.

2001-10-11  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>

	* unroll.c (loop_iterations): Extend check for multiple back edges.

--- gcc-2.95.2/gcc/testsuite/g++.old-deja/g++.other/unroll.C.unroll-iterations2	Thu Jan  3 17:53:09 2002
+++ gcc-2.95.2/gcc/testsuite/g++.old-deja/g++.other/unroll.C	Thu Jan  3 17:53:09 2002
@@ -0,0 +1,19 @@
+// Build don't link:
+// Special g++ Options: -O2 -funroll-all-loops
+
+int used ();
+
+struct A {
+  static void f () {
+	while (true)
+	  if (used())
+		return;
+  };
+};
+
+int foo () {
+  int i;
+  for (; used(); A::f())
+	i++;
+  return i;
+}
--- gcc-2.95.2/gcc/testsuite/gcc.c-torture/compile/20011010-1.c.unroll-iterations2	Thu Jan  3 17:52:30 2002
+++ gcc-2.95.2/gcc/testsuite/gcc.c-torture/compile/20011010-1.c	Thu Jan  3 17:52:22 2002
@@ -0,0 +1,10 @@
+extern int used (void);
+
+
+int foo () 
+{
+  int i;
+  for (; used (); ({while (1) if (used ()) return 0;}))
+    i++;
+  return i;
+}
--- gcc-2.95.2/gcc/testsuite/gcc.c-torture/execute/20011008-3.c.unroll-iterations2	Thu Jan  3 17:51:21 2002
+++ gcc-2.95.2/gcc/testsuite/gcc.c-torture/execute/20011008-3.c	Thu Jan  3 17:51:13 2002
@@ -0,0 +1,99 @@
+extern void exit (int);
+extern void abort (void);
+
+typedef unsigned int u_int32_t;
+typedef unsigned char u_int8_t;
+typedef int int32_t;
+
+typedef enum {
+        TXNLIST_DELETE,
+        TXNLIST_LSN,
+        TXNLIST_TXNID,
+        TXNLIST_PGNO
+} db_txnlist_type;
+
+struct __db_lsn; typedef struct __db_lsn DB_LSN;
+struct __db_lsn {
+        u_int32_t file;
+        u_int32_t offset;
+};
+struct __db_txnlist; typedef struct __db_txnlist DB_TXNLIST;
+
+struct __db_txnlist {
+        db_txnlist_type type;
+        struct { struct __db_txnlist *le_next; struct __db_txnlist **le_prev; } links;
+        union {
+                struct {
+                        u_int32_t txnid;
+                        int32_t generation;
+                        int32_t aborted;
+                } t;
+                struct {
+
+
+                        u_int32_t flags;
+                        int32_t fileid;
+                        u_int32_t count;
+                        char *fname;
+                } d;
+                struct {
+                        int32_t ntxns;
+                        int32_t maxn;
+                        DB_LSN *lsn_array;
+                } l;
+                struct {
+                        int32_t nentries;
+                        int32_t maxentry;
+                        char *fname;
+                        int32_t fileid;
+                        void *pgno_array;
+                        u_int8_t uid[20];
+                } p;
+        } u;
+};
+
+int log_compare (const DB_LSN *a, const DB_LSN *b)
+{
+  return 1;
+}
+
+
+int
+__db_txnlist_lsnadd(int val, DB_TXNLIST *elp, DB_LSN *lsnp, u_int32_t flags)
+{
+   int i;
+ 
+   for (i = 0; i < (!(flags & (0x1)) ? 1 : elp->u.l.ntxns); i++)
+     {
+	int __j;
+	DB_LSN __tmp;
+	val++; 
+	for (__j = 0; __j < elp->u.l.ntxns - 1; __j++)
+	  if (log_compare(&elp->u.l.lsn_array[__j], &elp->u.l.lsn_array[__j + 1]) < 0)
+	  {
+	     __tmp = elp->u.l.lsn_array[__j];
+	     elp->u.l.lsn_array[__j] = elp->u.l.lsn_array[__j + 1];
+	     elp->u.l.lsn_array[__j + 1] = __tmp;
+	  }
+     }
+
+   *lsnp = elp->u.l.lsn_array[0];
+   return val;
+}
+
+int main (void)
+{
+  DB_TXNLIST el;
+  DB_LSN lsn, lsn_a[1235];
+  
+  el.u.l.ntxns = 1234;
+  el.u.l.lsn_array = lsn_a;
+  
+  if (__db_txnlist_lsnadd (0, &el, &lsn, 0) != 1)
+    abort ();
+  
+  if (__db_txnlist_lsnadd (0, &el, &lsn, 1) != 1234)
+    abort ();
+  
+  exit (0);
+}
--- gcc-2.95.2/gcc/unroll.c.unroll-iterations2	Thu Jan  3 17:48:22 2002
+++ gcc-2.95.2/gcc/unroll.c	Thu Jan  3 17:49:58 2002
@@ -3698,6 +3698,31 @@
       return 0;
     }
 
+  /* If there are multiple conditionalized loop exit tests, they may jump
+     back to differing CODE_LABELs.  */
+  if (loop->top && loop->cont)
+    {
+      rtx temp = PREV_INSN (last_loop_insn);
+
+      do
+	{
+	  if (GET_CODE (temp) == JUMP_INSN
+	      /* Previous unrolling may have generated new insns not covered
+		 by the uid_luid array.  */
+	      && INSN_UID (JUMP_LABEL (temp)) < max_uid_for_loop
+	      /* Check if we jump back into the loop body.  */
+	      && INSN_LUID (JUMP_LABEL (temp)) > INSN_LUID (loop->top)
+	      && INSN_LUID (JUMP_LABEL (temp)) < INSN_LUID (loop->cont))
+	    {
+	      if (loop_dump_stream)
+		fprintf (loop_dump_stream,
+			 "Loop iterations: Loop has multiple back edges.\n");
+	      return 0;
+	    }
+	}
+      while ((temp = PREV_INSN (temp)) != loop->cont);
+    }
+
   /* Find the iteration variable.  If the last insn is a conditional
      branch, and the insn before tests a register value, make that the
      iteration variable.  */
