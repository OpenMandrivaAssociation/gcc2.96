--- libgcj/libjava/Makefile.am.jj	Wed May 24 02:15:48 2000
+++ libgcj/libjava/Makefile.am	Sat Jun  3 17:23:35 2000
@@ -222,19 +222,19 @@ nat_headers = $(ordinary_java_source_fil
 
 $(nat_headers): libgcj.zip
 
-java/lang/ClassLoader.h: java/lang/ClassLoader.class libgcj.zip
+java/lang/ClassLoader.h: libgcj.zip
 	$(GCJH) -classpath $(top_builddir) \
 		-friend 'jclass _Jv_FindClass (_Jv_Utf8Const *name, java::lang::ClassLoader *loader);' \
-		$(basename $<)
+		$(basename $@)
 
 ## Our internal main program needs to be able to create a FirstThread.
-gnu/gcj/runtime/FirstThread.h: gnu/gcj/runtime/FirstThread.class libgcj.zip
+gnu/gcj/runtime/FirstThread.h: libgcj.zip
 	$(GCJH) -classpath $(top_builddir) \
 		-friend 'void JvRunMain (jclass, int, const char **);' \
 		-friend 'void _Jv_RunMain (const char*, int, const char **);' \
-		$(basename $<)
+		$(basename $@)
 
-java/lang/Thread.h: java/lang/Thread.class libgcj.zip
+java/lang/Thread.h: libgcj.zip
 	$(GCJH) -classpath $(top_builddir) \
 		-prepend 'class _Jv_JNIEnv;' \
 		-prepend 'extern "Java" { namespace gnu { namespace gcj { namespace jni { class NativeThread; } } } };' \
@@ -246,9 +246,9 @@ java/lang/Thread.h: java/lang/Thread.cla
 		-friend 'int _Jv_CondWait (_Jv_ConditionVariable_t *cv, _Jv_Mutex_t *mu, jlong millis, jint nanos);' \
 		-friend 'int _Jv_CondNotify (_Jv_ConditionVariable_t *cv, _Jv_Mutex_t *mu);' \
 		-friend 'void _Jv_ThreadInterrupt (_Jv_Thread_t *data);' \
-		$(basename $<)
+		$(basename $@)
 
-java/lang/String.h: java/lang/String.class libgcj.zip
+java/lang/String.h: libgcj.zip
 	$(GCJH) -classpath $(top_builddir) \
 	    -friend 'jchar* _Jv_GetStringChars (jstring str);' \
 	    -friend 'jstring* _Jv_StringFindSlot (jchar*, jint, jint);' \
@@ -256,39 +256,39 @@ java/lang/String.h: java/lang/String.cla
 	    -friend 'jstring _Jv_NewStringUtf8Const (_Jv_Utf8Const* str);' \
 	    -friend 'jstring _Jv_NewStringLatin1 (const char*, jsize);' \
 	    -friend 'jstring _Jv_AllocString (jsize);' \
-	    $(basename $<)
+	    $(basename $@)
 
-java/lang/reflect/Constructor.h: java/lang/reflect/Constructor.class libgcj.zip
+java/lang/reflect/Constructor.h: libgcj.zip
 	$(GCJH) -classpath $(top_builddir) \
 	    -friend 'jmethodID _Jv_FromReflectedConstructor (java::lang::reflect::Constructor *);' \
 	    -friend 'java::lang::Class;' \
 	    -friend 'jobject _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID, jboolean);' \
-	    $(basename $<)
+	    $(basename $@)
 
-java/lang/reflect/Field.h: java/lang/reflect/Field.class libgcj.zip
+java/lang/reflect/Field.h: libgcj.zip
 	$(GCJH) -classpath $(top_builddir) \
 	    -friend 'jfieldID _Jv_FromReflectedField (java::lang::reflect::Field *);' \
 	    -friend 'jobject _Jv_JNI_ToReflectedField (_Jv_JNIEnv*, jclass, jfieldID, jboolean);' \
 	    -friend 'java::lang::Class;' \
-	    $(basename $<)
+	    $(basename $@)
 
-java/lang/reflect/Method.h: java/lang/reflect/Method.class libgcj.zip
+java/lang/reflect/Method.h: libgcj.zip
 	$(GCJH) -classpath $(top_builddir) \
 	    -friend 'jmethodID _Jv_FromReflectedMethod (java::lang::reflect::Method *);' \
 	    -friend 'java::lang::Class;' \
 	    -friend 'jobject _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID, jboolean);' \
-	    $(basename $<)
+	    $(basename $@)
 
-gnu/gcj/runtime/VMClassLoader.h: gnu/gcj/runtime/VMClassLoader.class libgcj.zip
+gnu/gcj/runtime/VMClassLoader.h: libgcj.zip
 	$(GCJH) -classpath $(top_builddir) \
 	    -friend 'java::lang::ClassLoader;' \
-	    $(basename $<)
+	    $(basename $@)
 
-java/io/ObjectInputStream$$GetField.h: java/io/ObjectInputStream$$GetField.class libgcj.zip
+java/io/ObjectInputStream$$GetField.h: libgcj.zip
 	$(GCJH) -classpath $(top_builddir) \
 	'java/io/ObjectInputStream$$GetField'
 
-java/io/ObjectOutputStream$$PutField.h: java/io/ObjectOutputStream$$PutField.class libgcj.zip
+java/io/ObjectOutputStream$$PutField.h: libgcj.zip
 	$(GCJH) -classpath $(top_builddir) \
 	'java/io/ObjectOutputStream$$PutField'
 
--- libgcj/libjava/Makefile.in.jj	Wed May 24 02:15:48 2000
+++ libgcj/libjava/Makefile.in	Sat Jun  3 17:25:37 2000
@@ -1914,18 +1914,18 @@ $(javao_files): libgcj.zip
 
 $(nat_headers): libgcj.zip
 
-java/lang/ClassLoader.h: java/lang/ClassLoader.class libgcj.zip
+java/lang/ClassLoader.h: libgcj.zip
 	$(GCJH) -classpath $(top_builddir) \
 		-friend 'jclass _Jv_FindClass (_Jv_Utf8Const *name, java::lang::ClassLoader *loader);' \
-		$(basename $<)
+		$(basename $@)
 
-gnu/gcj/runtime/FirstThread.h: gnu/gcj/runtime/FirstThread.class libgcj.zip
+gnu/gcj/runtime/FirstThread.h: libgcj.zip
 	$(GCJH) -classpath $(top_builddir) \
 		-friend 'void JvRunMain (jclass, int, const char **);' \
 		-friend 'void _Jv_RunMain (const char*, int, const char **);' \
-		$(basename $<)
+		$(basename $@)
 
-java/lang/Thread.h: java/lang/Thread.class libgcj.zip
+java/lang/Thread.h: libgcj.zip
 	$(GCJH) -classpath $(top_builddir) \
 		-prepend 'class _Jv_JNIEnv;' \
 		-prepend 'extern "Java" { namespace gnu { namespace gcj { namespace jni { class NativeThread; } } } };' \
@@ -1937,9 +1937,9 @@ java/lang/Thread.h: java/lang/Thread.cla
 		-friend 'int _Jv_CondWait (_Jv_ConditionVariable_t *cv, _Jv_Mutex_t *mu, jlong millis, jint nanos);' \
 		-friend 'int _Jv_CondNotify (_Jv_ConditionVariable_t *cv, _Jv_Mutex_t *mu);' \
 		-friend 'void _Jv_ThreadInterrupt (_Jv_Thread_t *data);' \
-		$(basename $<)
+		$(basename $@)
 
-java/lang/String.h: java/lang/String.class libgcj.zip
+java/lang/String.h: libgcj.zip
 	$(GCJH) -classpath $(top_builddir) \
 	    -friend 'jchar* _Jv_GetStringChars (jstring str);' \
 	    -friend 'jstring* _Jv_StringFindSlot (jchar*, jint, jint);' \
@@ -1947,39 +1947,39 @@ java/lang/String.h: java/lang/String.cla
 	    -friend 'jstring _Jv_NewStringUtf8Const (_Jv_Utf8Const* str);' \
 	    -friend 'jstring _Jv_NewStringLatin1 (const char*, jsize);' \
 	    -friend 'jstring _Jv_AllocString (jsize);' \
-	    $(basename $<)
+	    $(basename $@)
 
-java/lang/reflect/Constructor.h: java/lang/reflect/Constructor.class libgcj.zip
+java/lang/reflect/Constructor.h: libgcj.zip
 	$(GCJH) -classpath $(top_builddir) \
 	    -friend 'jmethodID _Jv_FromReflectedConstructor (java::lang::reflect::Constructor *);' \
 	    -friend 'java::lang::Class;' \
 	    -friend 'jobject _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID, jboolean);' \
-	    $(basename $<)
+	    $(basename $@)
 
-java/lang/reflect/Field.h: java/lang/reflect/Field.class libgcj.zip
+java/lang/reflect/Field.h: libgcj.zip
 	$(GCJH) -classpath $(top_builddir) \
 	    -friend 'jfieldID _Jv_FromReflectedField (java::lang::reflect::Field *);' \
 	    -friend 'jobject _Jv_JNI_ToReflectedField (_Jv_JNIEnv*, jclass, jfieldID, jboolean);' \
 	    -friend 'java::lang::Class;' \
-	    $(basename $<)
+	    $(basename $@)
 
-java/lang/reflect/Method.h: java/lang/reflect/Method.class libgcj.zip
+java/lang/reflect/Method.h: libgcj.zip
 	$(GCJH) -classpath $(top_builddir) \
 	    -friend 'jmethodID _Jv_FromReflectedMethod (java::lang::reflect::Method *);' \
 	    -friend 'java::lang::Class;' \
 	    -friend 'jobject _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID, jboolean);' \
-	    $(basename $<)
+	    $(basename $@)
 
-gnu/gcj/runtime/VMClassLoader.h: gnu/gcj/runtime/VMClassLoader.class libgcj.zip
+gnu/gcj/runtime/VMClassLoader.h: libgcj.zip
 	$(GCJH) -classpath $(top_builddir) \
 	    -friend 'java::lang::ClassLoader;' \
-	    $(basename $<)
+	    $(basename $@)
 
-java/io/ObjectInputStream$$GetField.h: java/io/ObjectInputStream$$GetField.class libgcj.zip
+java/io/ObjectInputStream$$GetField.h: libgcj.zip
 	$(GCJH) -classpath $(top_builddir) \
 	'java/io/ObjectInputStream$$GetField'
 
-java/io/ObjectOutputStream$$PutField.h: java/io/ObjectOutputStream$$PutField.class libgcj.zip
+java/io/ObjectOutputStream$$PutField.h: libgcj.zip
 	$(GCJH) -classpath $(top_builddir) \
 	'java/io/ObjectOutputStream$$PutField'
 
